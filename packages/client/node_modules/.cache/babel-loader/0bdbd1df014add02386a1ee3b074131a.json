{"ast":null,"code":"import _slicedToArray from \"/home/skyparci/work/my-boilerplate/packages/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/skyparci/work/my-boilerplate/packages/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { useEffect, useReducer, useCallback, useRef } from 'react';\nimport validate from './validate';\nimport { initializeFormState, trimFormValues, detectFormErrors, createErrorState, createInputState } from './utils'; // global\n\nimport { useGlobalStateContext } from 'global';\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case 'SUBMIT_READY':\n      return _objectSpread({}, state, {\n        isSubmitting: payload\n      });\n\n    case 'SET_FORM_STATE':\n      return _objectSpread({}, state, {\n        formState: _objectSpread({}, state.formState, payload)\n      });\n\n    case 'SET_FORM_VALUES':\n      return _objectSpread({}, state, {\n        formValues: payload\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst useForm = (configs = {}, submitCallback) => {\n  const _initializeFormState = initializeFormState(configs),\n        _initializeFormState2 = _slicedToArray(_initializeFormState, 2),\n        initialFormState = _initializeFormState2[0],\n        validator = _initializeFormState2[1];\n\n  const _useReducer = useReducer(reducer, {\n    isSubmitting: false,\n    formState: initialFormState,\n    formValues: null\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const isSubmitting = state.isSubmitting,\n        formState = state.formState,\n        formValues = state.formValues;\n  const validateForm = validate(validator);\n  const submitCallbackRef = useRef(submitCallback);\n  useEffect(() => {\n    submitCallbackRef.current = submitCallback;\n  }, [submitCallback]);\n  useEffect(() => {\n    if (isSubmitting) {\n      submitCallbackRef.current(formValues);\n    }\n  }, [formValues, isSubmitting]);\n\n  function validateAll(validator, values, formState) {\n    const errorResult = detectFormErrors(validator, formState, validateForm);\n\n    const _createErrorState = createErrorState(errorResult, values),\n          _createErrorState2 = _slicedToArray(_createErrorState, 2),\n          hasError = _createErrorState2[0],\n          errorFormState = _createErrorState2[1];\n\n    dispatch({\n      type: 'SET_FORM_STATE',\n      payload: errorFormState\n    });\n    if (!hasError) dispatch({\n      type: 'SUBMIT_READY',\n      payload: true\n    });\n  }\n\n  function onSubmit(event) {\n    if (event) event.preventDefault();\n    const trimmedValues = trimFormValues(formState);\n    if (!trimmedValues) return false;\n    dispatch({\n      type: 'SET_FORM_VALUES',\n      payload: trimmedValues\n    });\n    validateAll(validator, trimmedValues, formState);\n  }\n\n  function onChange(name, value) {\n    if (!name) return;\n\n    const _validateForm = validateForm(name, value, formState),\n          _validateForm2 = _slicedToArray(_validateForm, 2),\n          ok = _validateForm2[0],\n          message = _validateForm2[1];\n\n    LOG('ok', ok);\n    dispatch({\n      type: 'SET_FORM_STATE',\n      payload: {\n        [name]: createInputState(name, value, message)\n      }\n    });\n    dispatch({\n      type: 'SUBMIT_READY',\n      payload: false\n    });\n  }\n\n  const handleSubmit = useCallback(onSubmit, [formState]);\n  const handleChange = useCallback(onChange, [formState]);\n  return {\n    formState,\n    isSubmitting,\n    handleChange,\n    handleSubmit\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["/home/skyparci/work/my-boilerplate/packages/client/src/hooks/useValidation/useValidation.js"],"names":["useEffect","useReducer","useCallback","useRef","validate","initializeFormState","trimFormValues","detectFormErrors","createErrorState","createInputState","useGlobalStateContext","reducer","state","type","payload","isSubmitting","formState","formValues","useForm","configs","submitCallback","initialFormState","validator","dispatch","validateForm","submitCallbackRef","current","validateAll","values","errorResult","hasError","errorFormState","onSubmit","event","preventDefault","trimmedValues","onChange","name","value","ok","message","LOG","handleSubmit","handleChange"],"mappings":"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","sourcesContent":["import { useEffect, useReducer, useCallback, useRef } from 'react';\nimport validate from './validate';\nimport {\n    initializeFormState,\n    trimFormValues,\n    detectFormErrors,\n    createErrorState,\n    createInputState,\n} from './utils';\n// global\nimport { useGlobalStateContext } from 'global';\n\nfunction reducer(state, { type, payload }) {\n    switch (type) {\n        case 'SUBMIT_READY':\n            return { ...state, isSubmitting: payload };\n        case 'SET_FORM_STATE':\n            return {\n                ...state,\n                formState: {\n                    ...state.formState,\n                    ...payload,\n                },\n            };\n        case 'SET_FORM_VALUES':\n            return { ...state, formValues: payload };\n        default:\n            return state;\n    }\n}\n\nconst useForm = (configs: ConfigsType = {}, submitCallback: func): any => {\n    const [initialFormState, validator] = initializeFormState(configs);\n    const [state, dispatch] = useReducer(reducer, {\n        isSubmitting: false,\n        formState: initialFormState,\n        formValues: null,\n    });\n    const { isSubmitting, formState, formValues } = state;\n    const validateForm = validate(validator);\n    const submitCallbackRef = useRef(submitCallback);\n\n    useEffect(() => {\n        submitCallbackRef.current = submitCallback;\n    }, [submitCallback]);\n\n    useEffect(() => {\n        if (isSubmitting) {\n            submitCallbackRef.current(formValues);\n        }\n    }, [formValues, isSubmitting]);\n\n    function validateAll(validator, values, formState) {\n        const errorResult = detectFormErrors(\n            validator,\n            formState,\n            validateForm,\n        );\n        const [hasError, errorFormState] = createErrorState(\n            errorResult,\n            values,\n        );\n\n        dispatch({ type: 'SET_FORM_STATE', payload: errorFormState });\n\n        if (!hasError) dispatch({ type: 'SUBMIT_READY', payload: true });\n    }\n\n    function onSubmit(event) {\n        if (event) event.preventDefault();\n\n        const trimmedValues = trimFormValues(formState);\n\n        if (!trimmedValues) return false;\n\n        dispatch({ type: 'SET_FORM_VALUES', payload: trimmedValues });\n\n        validateAll(validator, trimmedValues, formState);\n    }\n\n    function onChange(name, value) {\n        if (!name) return;\n        const [ok, message] = validateForm(name, value, formState);\n        LOG('ok', ok);\n        dispatch({\n            type: 'SET_FORM_STATE',\n            payload: {\n                [name]: createInputState(name, value, message),\n            },\n        });\n        dispatch({ type: 'SUBMIT_READY', payload: false });\n    }\n\n    const handleSubmit = useCallback(onSubmit, [formState]);\n    const handleChange = useCallback(onChange, [formState]);\n\n    return {\n        formState,\n        isSubmitting,\n        handleChange,\n        handleSubmit,\n    };\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}