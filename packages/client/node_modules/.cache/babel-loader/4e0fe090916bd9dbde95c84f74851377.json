{"ast":null,"code":"import _slicedToArray from \"/home/skyparci/work/my-boilerplate/packages/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/skyparci/work/my-boilerplate/packages/client/src/scenes/Signin/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router'; // apollo\n\nimport { useMutation } from '@apollo/react-hooks'; // components\n\nimport TextField from 'components/TextField';\nimport Button from 'components/Button';\nimport Modal from 'components/Modal'; // queries\n\nimport { LOGIN_USER } from 'queries'; // hooks\n\nimport useValidation, { isRequired, isEmail, lengthBetween } from 'hooks/useValidation'; // styles\n\nimport { ButtonWrap } from './styles';\nconst configs = {\n  fields: {\n    email: {\n      rules: [[isRequired, 'email을 입력하세요.'], [isEmail, '올바른 email 주소가 아닙니다.']]\n    },\n    password: {\n      rules: [[isRequired, '비밀번호를 입력하세요.'], [lengthBetween(8, 35), '8-35 자를 입력하세요.']]\n    }\n  },\n  showErrors: 'blur'\n};\n\nconst Signin = ({\n  history\n}) => {\n  const _useMutation = useMutation(LOGIN_USER),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        loginUser = _useMutation2[0],\n        _useMutation2$ = _useMutation2[1],\n        loading = _useMutation2$.loading,\n        error = _useMutation2$.error;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isDone = _useState2[0],\n        setIsDone = _useState2[1];\n\n  const submitForm = async () => {\n    await loginUser({\n      variables: {\n        email: formState['email'].value,\n        password: formState['password'].value\n      }\n    }).then(resp => {\n      G.log('resp', resp);\n      localStorage.setItem('authToken', resp.data.user.token);\n      setIsDone(true);\n    }).catch(error => {\n      G.log('Error: ', error.message);\n    });\n  };\n\n  const _useValidation = useValidation(configs, submitForm),\n        formState = _useValidation.formState,\n        isSubmitting = _useValidation.isSubmitting,\n        handleChange = _useValidation.handleChange,\n        handleSubmit = _useValidation.handleSubmit;\n\n  useEffect(() => {\n    if (isDone) history.replace('/contracts');\n  }, [history, isDone]);\n  return React.createElement(\"div\", {\n    className: \"wrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(TextField, Object.assign({\n    title: \"User Email\",\n    placeholder: \"Email address\",\n    onChange: handleChange\n  }, formState['email'], {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(TextField, Object.assign({\n    type: \"password\",\n    title: \"Password\",\n    placeholder: \"Password\",\n    onChange: handleChange\n  }, formState['password'], {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(ButtonWrap, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    content: \"\\uB85C\\uADF8\\uC778\",\n    primary: true,\n    block: true,\n    loading: loading,\n    disabled: isSubmitting && !error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/signup\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Button, {\n    content: '회원가입',\n    primary: true,\n    block: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }))))), error && React.createElement(Modal, {\n    isVisible: !!error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, error && error.message)));\n};\n\nexport default withRouter(Signin);","map":{"version":3,"sources":["/home/skyparci/work/my-boilerplate/packages/client/src/scenes/Signin/index.js"],"names":["React","useState","useEffect","Link","withRouter","useMutation","TextField","Button","Modal","LOGIN_USER","useValidation","isRequired","isEmail","lengthBetween","ButtonWrap","configs","fields","email","rules","password","showErrors","Signin","history","loginUser","loading","error","isDone","setIsDone","submitForm","variables","formState","value","then","resp","G","log","localStorage","setItem","data","user","token","catch","message","isSubmitting","handleChange","handleSubmit","replace"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,UAAT,QAA2B,cAA3B,C,CACA;;AACA,SAASC,WAAT,QAA4B,qBAA5B,C,CACA;;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,kBAAlB,C,CACA;;AACA,SAASC,UAAT,QAA2B,SAA3B,C,CACA;;AACA,OAAOC,aAAP,IACIC,UADJ,EAEIC,OAFJ,EAGIC,aAHJ,QAIO,qBAJP,C,CAKA;;AACA,SAASC,UAAT,QAA2B,UAA3B;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,MAAM,EAAE;AACJC,IAAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAE,CACH,CAACP,UAAD,EAAa,eAAb,CADG,EAEH,CAACC,OAAD,EAAU,qBAAV,CAFG;AADJ,KADH;AAOJO,IAAAA,QAAQ,EAAE;AACND,MAAAA,KAAK,EAAE,CACH,CAACP,UAAD,EAAa,cAAb,CADG,EAEH,CAACE,aAAa,CAAC,CAAD,EAAI,EAAJ,CAAd,EAAuB,gBAAvB,CAFG;AADD;AAPN,GADI;AAeZO,EAAAA,UAAU,EAAE;AAfA,CAAhB;;AAkBA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA,uBACYjB,WAAW,CAACI,UAAD,CADvB;AAAA;AAAA,QACrBc,SADqB;AAAA;AAAA,QACRC,OADQ,kBACRA,OADQ;AAAA,QACCC,KADD,kBACCA,KADD;;AAAA,oBAEAxB,QAAQ,CAAC,KAAD,CAFR;AAAA;AAAA,QAErByB,MAFqB;AAAA,QAEbC,SAFa;;AAI5B,QAAMC,UAAU,GAAG,YAAY;AAC3B,UAAML,SAAS,CAAC;AACZM,MAAAA,SAAS,EAAE;AACPZ,QAAAA,KAAK,EAAEa,SAAS,CAAC,OAAD,CAAT,CAAmBC,KADnB;AAEPZ,QAAAA,QAAQ,EAAEW,SAAS,CAAC,UAAD,CAAT,CAAsBC;AAFzB;AADC,KAAD,CAAT,CAMDC,IANC,CAMIC,IAAI,IAAI;AACVC,MAAAA,CAAC,CAACC,GAAF,CAAM,MAAN,EAAcF,IAAd;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCJ,IAAI,CAACK,IAAL,CAAUC,IAAV,CAAeC,KAAjD;AACAb,MAAAA,SAAS,CAAC,IAAD,CAAT;AACH,KAVC,EAWDc,KAXC,CAWKhB,KAAK,IAAI;AACZS,MAAAA,CAAC,CAACC,GAAF,CAAM,SAAN,EAAiBV,KAAK,CAACiB,OAAvB;AACH,KAbC,CAAN;AAcH,GAfD;;AAJ4B,yBA0BxBhC,aAAa,CAACK,OAAD,EAAUa,UAAV,CA1BW;AAAA,QAsBxBE,SAtBwB,kBAsBxBA,SAtBwB;AAAA,QAuBxBa,YAvBwB,kBAuBxBA,YAvBwB;AAAA,QAwBxBC,YAxBwB,kBAwBxBA,YAxBwB;AAAA,QAyBxBC,YAzBwB,kBAyBxBA,YAzBwB;;AA4B5B3C,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIwB,MAAJ,EAAYJ,OAAO,CAACwB,OAAR,CAAgB,YAAhB;AACf,GAFQ,EAEN,CAACxB,OAAD,EAAUI,MAAV,CAFM,CAAT;AAIA,SACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,QAAQ,EAAEmB,YAAhB;AAA8B,IAAA,UAAU,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAC,YADV;AAEI,IAAA,WAAW,EAAC,eAFhB;AAGI,IAAA,QAAQ,EAAED;AAHd,KAIQd,SAAS,CAAC,OAAD,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EAQI,oBAAC,SAAD;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,KAAK,EAAC,UAFV;AAGI,IAAA,WAAW,EAAC,UAHhB;AAII,IAAA,QAAQ,EAAEc;AAJd,KAKQd,SAAS,CAAC,UAAD,CALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KARJ,EAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,EAgBI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,OAAO,sBAFX;AAGI,IAAA,OAAO,MAHX;AAII,IAAA,KAAK,MAJT;AAKI,IAAA,OAAO,EAAEN,OALb;AAMI,IAAA,QAAQ,EAAEmB,YAAY,IAAI,CAAClB,KAN/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAjB;AAAyB,IAAA,OAAO,MAAhC;AAAiC,IAAA,KAAK,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CATJ,CAhBJ,CADJ,EAkCKA,KAAK,IACF,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAE,CAAC,CAACA,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BA,KAAK,IAAIA,KAAK,CAACiB,OAA7C,CADJ,CAnCR,CADJ;AA0CH,CA1ED;;AA4EA,eAAetC,UAAU,CAACiB,MAAD,CAAzB","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router';\n// apollo\nimport { useMutation } from '@apollo/react-hooks';\n// components\nimport TextField from 'components/TextField';\nimport Button from 'components/Button';\nimport Modal from 'components/Modal';\n// queries\nimport { LOGIN_USER } from 'queries';\n// hooks\nimport useValidation, {\n    isRequired,\n    isEmail,\n    lengthBetween,\n} from 'hooks/useValidation';\n// styles\nimport { ButtonWrap } from './styles';\n\nconst configs = {\n    fields: {\n        email: {\n            rules: [\n                [isRequired, 'email을 입력하세요.'],\n                [isEmail, '올바른 email 주소가 아닙니다.'],\n            ],\n        },\n        password: {\n            rules: [\n                [isRequired, '비밀번호를 입력하세요.'],\n                [lengthBetween(8, 35), '8-35 자를 입력하세요.'],\n            ],\n        },\n    },\n    showErrors: 'blur',\n};\n\nconst Signin = ({ history }) => {\n    const [loginUser, { loading, error }] = useMutation(LOGIN_USER);\n    const [isDone, setIsDone] = useState(false);\n\n    const submitForm = async () => {\n        await loginUser({\n            variables: {\n                email: formState['email'].value,\n                password: formState['password'].value,\n            },\n        })\n            .then(resp => {\n                G.log('resp', resp);\n                localStorage.setItem('authToken', resp.data.user.token);\n                setIsDone(true);\n            })\n            .catch(error => {\n                G.log('Error: ', error.message);\n            });\n    };\n\n    const {\n        formState,\n        isSubmitting,\n        handleChange,\n        handleSubmit,\n    } = useValidation(configs, submitForm);\n\n    useEffect(() => {\n        if (isDone) history.replace('/contracts');\n    }, [history, isDone]);\n\n    return (\n        <div className=\"wrap\">\n            <form onSubmit={handleSubmit} noValidate>\n                <TextField\n                    title=\"User Email\"\n                    placeholder=\"Email address\"\n                    onChange={handleChange}\n                    {...formState['email']}\n                />\n                <br />\n                <TextField\n                    type=\"password\"\n                    title=\"Password\"\n                    placeholder=\"Password\"\n                    onChange={handleChange}\n                    {...formState['password']}\n                />\n                <br />\n                <ButtonWrap>\n                    <Button\n                        type=\"submit\"\n                        content={`로그인`}\n                        primary\n                        block\n                        loading={loading}\n                        disabled={isSubmitting && !error}\n                    />\n                    <div>\n                        <Link to=\"/signup\">\n                            <Button content={'회원가입'} primary block />\n                        </Link>\n                    </div>\n                </ButtonWrap>\n            </form>\n\n            {error && (\n                <Modal isVisible={!!error}>\n                    <div className=\"text-center\">{error && error.message}</div>\n                </Modal>\n            )}\n        </div>\n    );\n};\n\nexport default withRouter(Signin);\n"]},"metadata":{},"sourceType":"module"}