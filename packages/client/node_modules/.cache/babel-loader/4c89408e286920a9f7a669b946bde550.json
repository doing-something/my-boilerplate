{"ast":null,"code":"import _slicedToArray from \"/home/skyparci/work/my-boilerplate/packages/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nexport const trimValue = v => typeof v === 'string' ? v.trim() : v;\nexport const createInputState = (name, value, error) => ({\n  name,\n  value,\n  error\n});\nexport const initializeFormState = configsObj => {\n  return Object.keys(configsObj).reduce(([formState, validator], key) => {\n    const rules = configsObj[key].rules;\n    formState[key] = createInputState(key, configsObj[key].default != null ? configsObj[key].default : '', '');\n\n    if (rules && rules.length) {\n      validator[key] = configsObj[key].rules;\n    }\n\n    return [formState, validator];\n  }, [{}, {}]);\n};\nexport const trimFormValues = values => {\n  const _Object$keys$reduce = Object.keys(values).reduce(([emptyCount, formState], key) => {\n    formState[key] = trimValue(values[key].value);\n    emptyCount += !formState[key] ? 1 : 0;\n    return [emptyCount, formState];\n  }, [0, {}]),\n        _Object$keys$reduce2 = _slicedToArray(_Object$keys$reduce, 2),\n        emptyCount = _Object$keys$reduce2[0],\n        trimmed = _Object$keys$reduce2[1];\n\n  const isPristine = Object.keys(values).length === emptyCount;\n  return isPristine ? null : trimmed;\n};\nexport const detectFormErrors = (validator, formState, validateFunc) => {\n  return Object.keys(validator).reduce((acc, key) => {\n    const _validateFunc = validateFunc(key, formState[key].value, formState),\n          _validateFunc2 = _slicedToArray(_validateFunc, 2),\n          ok = _validateFunc2[0],\n          message = _validateFunc2[1];\n\n    if (!ok) acc[key] = message;\n    return acc;\n  }, {});\n};\nexport const createErrorState = (errorResult = {}, values) => {\n  return Object.keys(errorResult).reduce(([hasError, result], key) => {\n    hasError = true;\n    result[key] = createInputState(key, values[key], errorResult[key]);\n    return [hasError, result];\n  }, [false, {}]);\n};","map":{"version":3,"sources":["/home/skyparci/work/my-boilerplate/packages/client/src/hooks/useValidation/utils.js"],"names":["trimValue","v","trim","createInputState","name","value","error","initializeFormState","configsObj","Object","keys","reduce","formState","validator","key","rules","default","length","trimFormValues","values","emptyCount","trimmed","isPristine","detectFormErrors","validateFunc","acc","ok","message","createErrorState","errorResult","hasError","result"],"mappings":"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","sourcesContent":["/* @flow */\ntype InputStateType = {\n    name: string,\n    value: any,\n    error: string,\n};\n\ntype InputConfigType = {\n    defalut?: ?any,\n    rules?: ?Array<func, string>,\n};\n\ntype ConfigsType = {\n    [name: string]: InputConfigType,\n};\n\ntype FormStateType = {\n    [name: string]: InputStateType,\n};\n\ntype RulesType = {\n    [name: string]: Array<func, string>,\n};\n\ntype ErrorResultType = {\n    [name: string]: string,\n};\n\nexport const trimValue = v => (typeof v === 'string' ? v.trim() : v);\n\nexport const createInputState = (\n    name: string,\n    value: string | number | boolean,\n    error: string,\n): InputStateType => ({\n    name,\n    value,\n    error,\n});\n\nexport const initializeFormState = (\n    configsObj: ConfigsType,\n): Array<FormStateType, RulesType> => {\n    return Object.keys(configsObj).reduce(\n        ([formState, validator], key) => {\n            const rules = configsObj[key].rules;\n\n            formState[key] = createInputState(\n                key,\n                configsObj[key].default != null ? configsObj[key].default : '',\n                '',\n            );\n\n            if (rules && rules.length) {\n                validator[key] = configsObj[key].rules;\n            }\n\n            return [formState, validator];\n        },\n        [{}, {}],\n    );\n};\n\nexport const trimFormValues = (values: FormStateType): void | FormStateType => {\n    const [emptyCount, trimmed] = Object.keys(values).reduce(\n        ([emptyCount, formState], key) => {\n            formState[key] = trimValue(values[key].value);\n            emptyCount += !formState[key] ? 1 : 0;\n            return [emptyCount, formState];\n        },\n        [0, {}],\n    );\n\n    const isPristine = Object.keys(values).length === emptyCount;\n\n    return isPristine ? null : trimmed;\n};\n\nexport const detectFormErrors = (\n    validator: RulesType,\n    formState: FormStateType,\n    validateFunc: any,\n): ErrorResultType => {\n    return Object.keys(validator).reduce((acc, key) => {\n        const [ok, message] = validateFunc(\n            key,\n            formState[key].value,\n            formState,\n        );\n        if (!ok) acc[key] = message;\n        return acc;\n    }, {});\n};\n\nexport const createErrorState = (\n    errorResult: ErrorResultType = {},\n    values: FormStateType,\n): Array<boolean, FormStateType> => {\n    return Object.keys(errorResult).reduce(\n        ([hasError, result], key) => {\n            hasError = true;\n            result[key] = createInputState(key, values[key], errorResult[key]);\n\n            return [hasError, result];\n        },\n        [false, {}],\n    );\n};\n"]},"metadata":{},"sourceType":"module"}