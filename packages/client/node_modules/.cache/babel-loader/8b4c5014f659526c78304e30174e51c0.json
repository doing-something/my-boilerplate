{"ast":null,"code":"import { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error'; // constants\n\nconst UNAUTHORIZED = 'Forbidden';\nconst FORBIDDEN = 'Unauthorized'; // const NOT_ALLOWED = 'Not allowed';\n\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors && graphQLErrors.filter(e => e).length > 0) {\n    graphQLErrors.map(({\n      message = '',\n      status = 200\n    }) => {\n      if (UNAUTHORIZED === message || status === 401) {\n        console.warn(\"You've attempted to access \".concat(UNAUTHORIZED, \" section\"));\n      }\n\n      if (FORBIDDEN === message || status === 403) {\n        console.warn(\"You've attempted a \".concat(FORBIDDEN, \" action\"));\n      }\n\n      return null;\n    });\n\n    if (networkError && networkError.statusCode === 401) {\n      console.warn(UNAUTHORIZED);\n    }\n\n    if (networkError && networkError.statusCode === 403) {\n      console.warn(FORBIDDEN);\n    }\n\n    if (networkError && networkError.statusCode >= 500) {\n      console.warn('SERVER ERROR');\n    }\n  }\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem('authToken');\n  return {\n    headers: Object.assign({}, headers, {\n      Authorization: token ? \"Bearer \".concat(token) : ''\n    })\n  };\n});\nconst httpLink = new HttpLink({\n  uri: \"\".concat(process.env.REACT_APP_API_URL)\n});\nconst links = [errorLink, authLink, httpLink];\nconst link = ApolloLink.from(links);\nconst defaultOptions = {\n  query: {\n    fetchPolicy: 'cache-and-network',\n    errorPolicy: 'all'\n  }\n};\nconst apolloCache = new InMemoryCache({\n  dataIdFromObject: e => \"\".concat(e.__typename, \"_\").concat(e.id) || null\n});\nconst configs = {\n  link,\n  cache: apolloCache,\n  defaultOptions\n};\nexport default configs;","map":{"version":3,"sources":["/home/skyparci/work/my-boilerplate/packages/client/src/routes/apolloConfigs.js"],"names":["ApolloLink","HttpLink","InMemoryCache","setContext","onError","UNAUTHORIZED","FORBIDDEN","errorLink","graphQLErrors","networkError","filter","e","length","map","message","status","console","warn","statusCode","authLink","_","headers","token","localStorage","getItem","Object","assign","Authorization","httpLink","uri","process","env","REACT_APP_API_URL","links","link","from","defaultOptions","query","fetchPolicy","errorPolicy","apolloCache","dataIdFromObject","__typename","id","configs","cache"],"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,OAAT,QAAwB,mBAAxB,C,CAEA;;AACA,MAAMC,YAAY,GAAG,WAArB;AACA,MAAMC,SAAS,GAAG,cAAlB,C,CACA;;AAEA,MAAMC,SAAS,GAAGH,OAAO,CAAC,CAAC;AAAEI,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAqC;AAC3D,MAAID,aAAa,IAAIA,aAAa,CAACE,MAAd,CAAqBC,CAAC,IAAIA,CAA1B,EAA6BC,MAA7B,GAAsC,CAA3D,EAA8D;AAC1DJ,IAAAA,aAAa,CAACK,GAAd,CAAkB,CAAC;AAAEC,MAAAA,OAAO,GAAG,EAAZ;AAAgBC,MAAAA,MAAM,GAAG;AAAzB,KAAD,KAAoC;AAClD,UAAIV,YAAY,KAAKS,OAAjB,IAA4BC,MAAM,KAAK,GAA3C,EAAgD;AAC5CC,QAAAA,OAAO,CAACC,IAAR,sCACkCZ,YADlC;AAGH;;AACD,UAAIC,SAAS,KAAKQ,OAAd,IAAyBC,MAAM,KAAK,GAAxC,EAA6C;AACzCC,QAAAA,OAAO,CAACC,IAAR,8BAAmCX,SAAnC;AACH;;AACD,aAAO,IAAP;AACH,KAVD;;AAYA,QAAIG,YAAY,IAAIA,YAAY,CAACS,UAAb,KAA4B,GAAhD,EAAqD;AACjDF,MAAAA,OAAO,CAACC,IAAR,CAAaZ,YAAb;AACH;;AACD,QAAII,YAAY,IAAIA,YAAY,CAACS,UAAb,KAA4B,GAAhD,EAAqD;AACjDF,MAAAA,OAAO,CAACC,IAAR,CAAaX,SAAb;AACH;;AACD,QAAIG,YAAY,IAAIA,YAAY,CAACS,UAAb,IAA2B,GAA/C,EAAoD;AAChDF,MAAAA,OAAO,CAACC,IAAR,CAAa,cAAb;AACH;AACJ;AACJ,CAxBwB,CAAzB;AA0BA,MAAME,QAAQ,GAAGhB,UAAU,CAAC,CAACiB,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC5C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAd;AACA,SAAO;AACHH,IAAAA,OAAO,EAAEI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,OAAlB,EAA2B;AAChCM,MAAAA,aAAa,EAAEL,KAAK,oBAAaA,KAAb,IAAuB;AADX,KAA3B;AADN,GAAP;AAKH,CAP0B,CAA3B;AASA,MAAMM,QAAQ,GAAG,IAAI3B,QAAJ,CAAa;AAC1B4B,EAAAA,GAAG,YAAKC,OAAO,CAACC,GAAR,CAAYC,iBAAjB;AADuB,CAAb,CAAjB;AAIA,MAAMC,KAAK,GAAG,CAAC1B,SAAD,EAAYY,QAAZ,EAAsBS,QAAtB,CAAd;AACA,MAAMM,IAAI,GAAGlC,UAAU,CAACmC,IAAX,CAAgBF,KAAhB,CAAb;AAEA,MAAMG,cAAc,GAAG;AACnBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,WAAW,EAAE,mBADV;AAEHC,IAAAA,WAAW,EAAE;AAFV;AADY,CAAvB;AAOA,MAAMC,WAAW,GAAG,IAAItC,aAAJ,CAAkB;AAClCuC,EAAAA,gBAAgB,EAAE9B,CAAC,IAAI,UAAGA,CAAC,CAAC+B,UAAL,cAAmB/B,CAAC,CAACgC,EAArB,KAA6B;AADlB,CAAlB,CAApB;AAIA,MAAMC,OAAO,GAAG;AACZV,EAAAA,IADY;AAEZW,EAAAA,KAAK,EAAEL,WAFK;AAGZJ,EAAAA;AAHY,CAAhB;AAMA,eAAeQ,OAAf","sourcesContent":["import { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\n\n// constants\nconst UNAUTHORIZED = 'Forbidden';\nconst FORBIDDEN = 'Unauthorized';\n// const NOT_ALLOWED = 'Not allowed';\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors && graphQLErrors.filter(e => e).length > 0) {\n        graphQLErrors.map(({ message = '', status = 200 }) => {\n            if (UNAUTHORIZED === message || status === 401) {\n                console.warn(\n                    `You've attempted to access ${UNAUTHORIZED} section`,\n                );\n            }\n            if (FORBIDDEN === message || status === 403) {\n                console.warn(`You've attempted a ${FORBIDDEN} action`);\n            }\n            return null;\n        });\n\n        if (networkError && networkError.statusCode === 401) {\n            console.warn(UNAUTHORIZED);\n        }\n        if (networkError && networkError.statusCode === 403) {\n            console.warn(FORBIDDEN);\n        }\n        if (networkError && networkError.statusCode >= 500) {\n            console.warn('SERVER ERROR');\n        }\n    }\n});\n\nconst authLink = setContext((_, { headers }) => {\n    const token = localStorage.getItem('authToken');\n    return {\n        headers: Object.assign({}, headers, {\n            Authorization: token ? `Bearer ${token}` : '',\n        }),\n    };\n});\n\nconst httpLink = new HttpLink({\n    uri: `${process.env.REACT_APP_API_URL}`,\n});\n\nconst links = [errorLink, authLink, httpLink];\nconst link = ApolloLink.from(links);\n\nconst defaultOptions = {\n    query: {\n        fetchPolicy: 'cache-and-network',\n        errorPolicy: 'all',\n    },\n};\n\nconst apolloCache = new InMemoryCache({\n    dataIdFromObject: e => `${e.__typename}_${e.id}` || null,\n});\n\nconst configs = {\n    link,\n    cache: apolloCache,\n    defaultOptions,\n};\n\nexport default configs;\n"]},"metadata":{},"sourceType":"module"}