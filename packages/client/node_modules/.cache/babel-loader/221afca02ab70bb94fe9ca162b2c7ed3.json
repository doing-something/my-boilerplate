{"ast":null,"code":"import _slicedToArray from \"/home/skyparci/work/my-boilerplate/packages/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/skyparci/work/my-boilerplate/packages/client/src/scenes/Signup/index.js\";\nimport React from 'react'; // apollo\n\nimport { useMutation } from '@apollo/react-hooks';\nimport { REGISTER_USER } from 'queries'; // components\n\nimport TextField from 'components/TextField';\nimport Button from 'components/Button';\nimport Modal from 'components/Modal'; // hooks\n\nimport useValidation, { isRequired, isEmail, isSameValueWith, lengthBetween } from 'hooks/useValidation'; // constants\n\nconst userNameError = '이름을 입력하세요.';\nconst emailNameError = 'email을 입력하세요.';\nconst passwordError = '비밀번호를 입력하세요.';\nconst passwordConfirmError = '비밀번호를 확인해주세요.';\nconst configs = {\n  fields: {\n    username: {\n      rules: [[isRequired, userNameError]]\n    },\n    email: {\n      rules: [[isRequired, emailNameError], [isEmail, '올바른 email 주소가 아닙니다.']]\n    },\n    password: {\n      rules: [[isRequired, passwordError], [lengthBetween(8, 35), '8-35 자를 입력하세요.']]\n    },\n    passwordConfirm: {\n      rules: [[isRequired, passwordConfirmError], [isSameValueWith('password'), passwordConfirmError]]\n    } // isAccepted: {\n    //     default: false,\n    //     rules: [[isTrue, '동의해주세요.']],\n    // },\n\n  },\n  showErrors: 'blur'\n};\n\nconst Register = props => {\n  const _useMutation = useMutation(REGISTER_USER),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        registerUser = _useMutation2[0],\n        _useMutation2$ = _useMutation2[1],\n        loading = _useMutation2$.loading,\n        error = _useMutation2$.error;\n\n  const submitForm = async context => {\n    await registerUser({\n      variables: {\n        name: context.values['username'],\n        email: context.values['email'],\n        password: context.values['password']\n      }\n    }).then(() => {\n      props.history.push('/signin');\n    }).catch(error => {\n      G.log('Error: ', error.message);\n    });\n  };\n\n  const _useValidation = useValidation(configs, submitForm),\n        isSubmitted = _useValidation.isSubmitted,\n        getFieldProps = _useValidation.getFieldProps,\n        handleSubmit = _useValidation.handleSubmit;\n\n  G.log('Signup formState', error);\n  return React.createElement(\"div\", {\n    className: \"wrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(TextField, Object.assign({\n    placeholder: \"User Name (First + Last Name)\",\n    title: \"User Name\"\n  }, getFieldProps('username'), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(TextField, Object.assign({\n    placeholder: \"Email\",\n    title: \"User Email\"\n  }, getFieldProps('email'), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(TextField, Object.assign({\n    type: \"password\",\n    placeholder: \"Password\",\n    title: \"Password\"\n  }, getFieldProps('password'), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(TextField, Object.assign({\n    type: \"password\",\n    placeholder: \"Repeat Password\",\n    title: \"Repeat password\"\n  }, getFieldProps('passwordConfirm'), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    content: \"Register\",\n    primary: true,\n    block: true,\n    loading: loading,\n    disabled: isSubmitted && !error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })), error && React.createElement(Modal, {\n    isVisible: !!error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, error && error.message)));\n};\n\nexport default Register;","map":{"version":3,"sources":["/home/skyparci/work/my-boilerplate/packages/client/src/scenes/Signup/index.js"],"names":["React","useMutation","REGISTER_USER","TextField","Button","Modal","useValidation","isRequired","isEmail","isSameValueWith","lengthBetween","userNameError","emailNameError","passwordError","passwordConfirmError","configs","fields","username","rules","email","password","passwordConfirm","showErrors","Register","props","registerUser","loading","error","submitForm","context","variables","name","values","then","history","push","catch","G","log","message","isSubmitted","getFieldProps","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\n// apollo\nimport { useMutation } from '@apollo/react-hooks';\nimport { REGISTER_USER } from 'queries';\n// components\nimport TextField from 'components/TextField';\nimport Button from 'components/Button';\nimport Modal from 'components/Modal';\n// hooks\nimport useValidation, {\n    isRequired,\n    isEmail,\n    isSameValueWith,\n    lengthBetween,\n} from 'hooks/useValidation';\n// constants\nconst userNameError = '이름을 입력하세요.';\nconst emailNameError = 'email을 입력하세요.';\nconst passwordError = '비밀번호를 입력하세요.';\nconst passwordConfirmError = '비밀번호를 확인해주세요.';\n\nconst configs = {\n    fields: {\n        username: {\n            rules: [[isRequired, userNameError]],\n        },\n        email: {\n            rules: [\n                [isRequired, emailNameError],\n                [isEmail, '올바른 email 주소가 아닙니다.'],\n            ],\n        },\n        password: {\n            rules: [\n                [isRequired, passwordError],\n                [lengthBetween(8, 35), '8-35 자를 입력하세요.'],\n            ],\n        },\n        passwordConfirm: {\n            rules: [\n                [isRequired, passwordConfirmError],\n                [isSameValueWith('password'), passwordConfirmError],\n            ],\n        },\n        // isAccepted: {\n        //     default: false,\n        //     rules: [[isTrue, '동의해주세요.']],\n        // },\n    },\n    showErrors: 'blur',\n};\n\nconst Register = props => {\n    const [registerUser, { loading, error }] = useMutation(REGISTER_USER);\n\n    const submitForm = async context => {\n        await registerUser({\n            variables: {\n                name: context.values['username'],\n                email: context.values['email'],\n                password: context.values['password'],\n            },\n        })\n            .then(() => {\n                props.history.push('/signin');\n            })\n            .catch(error => {\n                G.log('Error: ', error.message);\n            });\n    };\n\n    const { isSubmitted, getFieldProps, handleSubmit } = useValidation(\n        configs,\n        submitForm,\n    );\n    G.log('Signup formState', error);\n\n    return (\n        <div className=\"wrap\">\n            <form onSubmit={handleSubmit} noValidate>\n                <TextField\n                    placeholder=\"User Name (First + Last Name)\"\n                    title=\"User Name\"\n                    {...getFieldProps('username')}\n                />\n                <br />\n                <TextField\n                    placeholder=\"Email\"\n                    title=\"User Email\"\n                    {...getFieldProps('email')}\n                />\n                <br />\n                <TextField\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    title=\"Password\"\n                    {...getFieldProps('password')}\n                />\n                <br />\n                <TextField\n                    type=\"password\"\n                    placeholder=\"Repeat Password\"\n                    title=\"Repeat password\"\n                    {...getFieldProps('passwordConfirm')}\n                />\n                <br />\n                <Button\n                    type=\"submit\"\n                    content={`Register`}\n                    primary\n                    block\n                    loading={loading}\n                    disabled={isSubmitted && !error}\n                />\n            </form>\n            {error && (\n                <Modal isVisible={!!error}>\n                    <div className=\"text-center\">{error && error.message}</div>\n                </Modal>\n            )}\n        </div>\n    );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}