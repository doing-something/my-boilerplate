{"ast":null,"code":"import _slicedToArray from \"/home/skyparci/work/my-boilerplate/packages/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/skyparci/work/my-boilerplate/packages/client/src/scenes/Signup/index.js\";\nimport React from 'react'; // apollo\n\nimport { useMutation } from '@apollo/react-hooks';\nimport { REGISTER_USER } from 'queries'; // components\n\nimport TextField from 'components/TextField';\nimport Button from 'components/Button';\nimport Modal from 'components/Modal'; // hooks\n\nimport useValidation, { isRequired, isEmail, isSameValueWith, lengthBetween } from 'hooks/useValidation'; // constants\n\nconst userNameError = '이름을 입력하세요.';\nconst emailNameError = 'email을 입력하세요.';\nconst passwordError = '비밀번호를 입력하세요.';\nconst passwordConfirmError = '비밀번호를 확인해주세요.';\nconst configs = {\n  username: {\n    rules: [[isRequired, userNameError]]\n  },\n  email: {\n    rules: [[isRequired, emailNameError], [isEmail, '올바른 email 주소가 아닙니다.']]\n  },\n  password: {\n    rules: [[isRequired, passwordError], [lengthBetween(8, 35), '8-35 자를 입력하세요.']]\n  },\n  passwordConfirm: {\n    rules: [[isRequired, passwordConfirmError], [isSameValueWith('password'), passwordConfirmError]]\n  } // isAccepted: {\n  //     default: false,\n  //     rules: [[isTrue, '동의해주세요.']],\n  // },\n\n};\n\nconst Register = props => {\n  const _useMutation = useMutation(REGISTER_USER),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        registerUser = _useMutation2[0],\n        _useMutation2$ = _useMutation2[1],\n        loading = _useMutation2$.loading,\n        error = _useMutation2$.error;\n\n  const submitForm = () => {\n    registerUser({\n      variables: {\n        name: formState['username'].value,\n        email: formState['email'].value,\n        password: formState['password'].value\n      }\n    }).then(() => {\n      props.history.push('/signin');\n    }).catch(error => {\n      console.log('Error: ', error.message);\n    });\n  };\n\n  const _useValidation = useValidation(configs, submitForm),\n        formState = _useValidation.formState,\n        isSubmitting = _useValidation.isSubmitting,\n        handleChange = _useValidation.handleChange,\n        handleSubmit = _useValidation.handleSubmit;\n\n  console.log('Signup formState', error, formState);\n  return React.createElement(\"div\", {\n    className: \"wrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(TextField, Object.assign({\n    placeholder: \"User Name (First + Last Name)\",\n    title: \"User Name\",\n    onChange: handleChange\n  }, formState['username'], {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(TextField, Object.assign({\n    placeholder: \"Email\",\n    title: \"User Email\",\n    onChange: handleChange\n  }, formState['email'], {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(TextField, Object.assign({\n    type: \"password\",\n    placeholder: \"Password\",\n    title: \"Password\",\n    onChange: handleChange\n  }, formState['password'], {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(TextField, Object.assign({\n    type: \"password\",\n    placeholder: \"Repeat Password\",\n    title: \"Repeat password\",\n    onChange: handleChange\n  }, formState['passwordConfirm'], {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    content: \"Register\",\n    primary: true,\n    block: true,\n    loading: loading,\n    disabled: isSubmitting && !error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })), error && React.createElement(Modal, {\n    isVisible: !!error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, error && error.message)));\n};\n\nexport default Register;","map":{"version":3,"sources":["/home/skyparci/work/my-boilerplate/packages/client/src/scenes/Signup/index.js"],"names":["React","useMutation","REGISTER_USER","TextField","Button","Modal","useValidation","isRequired","isEmail","isSameValueWith","lengthBetween","userNameError","emailNameError","passwordError","passwordConfirmError","configs","username","rules","email","password","passwordConfirm","Register","props","registerUser","loading","error","submitForm","variables","name","formState","value","then","history","push","catch","console","log","message","isSubmitting","handleChange","handleSubmit"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,aAAT,QAA8B,SAA9B,C,CACA;;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,kBAAlB,C,CACA;;AACA,OAAOC,aAAP,IACIC,UADJ,EAEIC,OAFJ,EAGIC,eAHJ,EAIIC,aAJJ,QAKO,qBALP,C,CAMA;;AACA,MAAMC,aAAa,GAAG,YAAtB;AACA,MAAMC,cAAc,GAAG,eAAvB;AACA,MAAMC,aAAa,GAAG,cAAtB;AACA,MAAMC,oBAAoB,GAAG,eAA7B;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,EAAE,CAAC,CAACV,UAAD,EAAaI,aAAb,CAAD;AADD,GADE;AAIZO,EAAAA,KAAK,EAAE;AACHD,IAAAA,KAAK,EAAE,CACH,CAACV,UAAD,EAAaK,cAAb,CADG,EAEH,CAACJ,OAAD,EAAU,qBAAV,CAFG;AADJ,GAJK;AAUZW,EAAAA,QAAQ,EAAE;AACNF,IAAAA,KAAK,EAAE,CACH,CAACV,UAAD,EAAaM,aAAb,CADG,EAEH,CAACH,aAAa,CAAC,CAAD,EAAI,EAAJ,CAAd,EAAuB,gBAAvB,CAFG;AADD,GAVE;AAgBZU,EAAAA,eAAe,EAAE;AACbH,IAAAA,KAAK,EAAE,CACH,CAACV,UAAD,EAAaO,oBAAb,CADG,EAEH,CAACL,eAAe,CAAC,UAAD,CAAhB,EAA8BK,oBAA9B,CAFG;AADM,GAhBL,CAsBZ;AACA;AACA;AACA;;AAzBY,CAAhB;;AA4BA,MAAMO,QAAQ,GAAGC,KAAK,IAAI;AAAA,uBACqBrB,WAAW,CAACC,aAAD,CADhC;AAAA;AAAA,QACfqB,YADe;AAAA;AAAA,QACCC,OADD,kBACCA,OADD;AAAA,QACUC,KADV,kBACUA,KADV;;AAGtB,QAAMC,UAAU,GAAG,MAAM;AACrBH,IAAAA,YAAY,CAAC;AACTI,MAAAA,SAAS,EAAE;AACPC,QAAAA,IAAI,EAAEC,SAAS,CAAC,UAAD,CAAT,CAAsBC,KADrB;AAEPZ,QAAAA,KAAK,EAAEW,SAAS,CAAC,OAAD,CAAT,CAAmBC,KAFnB;AAGPX,QAAAA,QAAQ,EAAEU,SAAS,CAAC,UAAD,CAAT,CAAsBC;AAHzB;AADF,KAAD,CAAZ,CAOKC,IAPL,CAOU,MAAM;AACRT,MAAAA,KAAK,CAACU,OAAN,CAAcC,IAAd,CAAmB,SAAnB;AACH,KATL,EAUKC,KAVL,CAUWT,KAAK,IAAI;AACZU,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBX,KAAK,CAACY,OAA7B;AACH,KAZL;AAaH,GAdD;;AAHsB,yBAwBlB/B,aAAa,CAACS,OAAD,EAAUW,UAAV,CAxBK;AAAA,QAoBlBG,SApBkB,kBAoBlBA,SApBkB;AAAA,QAqBlBS,YArBkB,kBAqBlBA,YArBkB;AAAA,QAsBlBC,YAtBkB,kBAsBlBA,YAtBkB;AAAA,QAuBlBC,YAvBkB,kBAuBlBA,YAvBkB;;AAyBtBL,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCX,KAAhC,EAAuCI,SAAvC;AAEA,SACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,QAAQ,EAAEW,YAAhB;AAA8B,IAAA,UAAU,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,WAAW,EAAC,+BADhB;AAEI,IAAA,KAAK,EAAC,WAFV;AAGI,IAAA,QAAQ,EAAED;AAHd,KAIQV,SAAS,CAAC,UAAD,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EAQI,oBAAC,SAAD;AACI,IAAA,WAAW,EAAC,OADhB;AAEI,IAAA,KAAK,EAAC,YAFV;AAGI,IAAA,QAAQ,EAAEU;AAHd,KAIQV,SAAS,CAAC,OAAD,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KARJ,EAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,EAeI,oBAAC,SAAD;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,WAAW,EAAC,UAFhB;AAGI,IAAA,KAAK,EAAC,UAHV;AAII,IAAA,QAAQ,EAAEU;AAJd,KAKQV,SAAS,CAAC,UAAD,CALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAfJ,EAsBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBJ,EAuBI,oBAAC,SAAD;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,WAAW,EAAC,iBAFhB;AAGI,IAAA,KAAK,EAAC,iBAHV;AAII,IAAA,QAAQ,EAAEU;AAJd,KAKQV,SAAS,CAAC,iBAAD,CALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvBJ,EA8BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9BJ,EA+BI,oBAAC,MAAD;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,OAAO,YAFX;AAGI,IAAA,OAAO,MAHX;AAII,IAAA,KAAK,MAJT;AAKI,IAAA,OAAO,EAAEL,OALb;AAMI,IAAA,QAAQ,EAAEc,YAAY,IAAI,CAACb,KAN/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/BJ,CADJ,EAyCKA,KAAK,IACF,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAE,CAAC,CAACA,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BA,KAAK,IAAIA,KAAK,CAACY,OAA7C,CADJ,CA1CR,CADJ;AAiDH,CA5ED;;AA8EA,eAAehB,QAAf","sourcesContent":["import React from 'react';\n// apollo\nimport { useMutation } from '@apollo/react-hooks';\nimport { REGISTER_USER } from 'queries';\n// components\nimport TextField from 'components/TextField';\nimport Button from 'components/Button';\nimport Modal from 'components/Modal';\n// hooks\nimport useValidation, {\n    isRequired,\n    isEmail,\n    isSameValueWith,\n    lengthBetween,\n} from 'hooks/useValidation';\n// constants\nconst userNameError = '이름을 입력하세요.';\nconst emailNameError = 'email을 입력하세요.';\nconst passwordError = '비밀번호를 입력하세요.';\nconst passwordConfirmError = '비밀번호를 확인해주세요.';\n\nconst configs = {\n    username: {\n        rules: [[isRequired, userNameError]],\n    },\n    email: {\n        rules: [\n            [isRequired, emailNameError],\n            [isEmail, '올바른 email 주소가 아닙니다.'],\n        ],\n    },\n    password: {\n        rules: [\n            [isRequired, passwordError],\n            [lengthBetween(8, 35), '8-35 자를 입력하세요.'],\n        ],\n    },\n    passwordConfirm: {\n        rules: [\n            [isRequired, passwordConfirmError],\n            [isSameValueWith('password'), passwordConfirmError],\n        ],\n    },\n    // isAccepted: {\n    //     default: false,\n    //     rules: [[isTrue, '동의해주세요.']],\n    // },\n};\n\nconst Register = props => {\n    const [registerUser, { loading, error }] = useMutation(REGISTER_USER);\n\n    const submitForm = () => {\n        registerUser({\n            variables: {\n                name: formState['username'].value,\n                email: formState['email'].value,\n                password: formState['password'].value,\n            },\n        })\n            .then(() => {\n                props.history.push('/signin');\n            })\n            .catch(error => {\n                console.log('Error: ', error.message);\n            });\n    };\n\n    const {\n        formState,\n        isSubmitting,\n        handleChange,\n        handleSubmit,\n    } = useValidation(configs, submitForm);\n    console.log('Signup formState', error, formState);\n\n    return (\n        <div className=\"wrap\">\n            <form onSubmit={handleSubmit} noValidate>\n                <TextField\n                    placeholder=\"User Name (First + Last Name)\"\n                    title=\"User Name\"\n                    onChange={handleChange}\n                    {...formState['username']}\n                />\n                <br />\n                <TextField\n                    placeholder=\"Email\"\n                    title=\"User Email\"\n                    onChange={handleChange}\n                    {...formState['email']}\n                />\n                <br />\n                <TextField\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    title=\"Password\"\n                    onChange={handleChange}\n                    {...formState['password']}\n                />\n                <br />\n                <TextField\n                    type=\"password\"\n                    placeholder=\"Repeat Password\"\n                    title=\"Repeat password\"\n                    onChange={handleChange}\n                    {...formState['passwordConfirm']}\n                />\n                <br />\n                <Button\n                    type=\"submit\"\n                    content={`Register`}\n                    primary\n                    block\n                    loading={loading}\n                    disabled={isSubmitting && !error}\n                />\n            </form>\n            {error && (\n                <Modal isVisible={!!error}>\n                    <div className=\"text-center\">{error && error.message}</div>\n                </Modal>\n            )}\n        </div>\n    );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}