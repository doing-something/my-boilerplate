{"ast":null,"code":"import _slicedToArray from \"/home/skyparci/work/my-boilerplate/packages/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/skyparci/work/my-boilerplate/packages/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { useReducer, useMemo, useCallback } from 'react';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport validate from './validate'; // constants\n\nconst UPDATE = 'UPDATE';\nconst VALIDATE = 'VALIDATE';\nconst BLUR = 'BLUR';\nconst SUBMIT = 'SUBMIT';\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case UPDATE:\n      const values = _objectSpread({}, state.values, payload);\n\n      console.log('change', fieldName, value);\n      return _objectSpread({}, state, {\n        values,\n        errors: {}\n      });\n\n    case VALIDATE:\n      return _objectSpread({}, state, {\n        errors: payload\n      });\n\n    case BLUR:\n      const blurred = _objectSpread({}, state.blurred, {\n        [payload]: true\n      });\n\n      return _objectSpread({}, state, {\n        blurred\n      });\n\n    case SUBMIT:\n      return _objectSpread({}, state, {\n        isSubmitted: true\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst useForm = (config = {}, submitCallback) => {\n  const _useReducer = useReducer(reducer, getInitialState(config)),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  if (typeof config === 'function') config = config(state.values);\n  const handleSubmit = useCallback(onSubmit, []);\n  useDeepCompareEffect(() => {\n    const errors = validate(state.values, config.fields);\n    dispatch({\n      type: VALIDATE,\n      payload: errors\n    });\n  }, [state.values, config.fields]);\n  const errors = useMemo(() => getErrors(state, config), [state, config]);\n  const isFormValid = useMemo(() => Object.values(errors).every(error => error === null), [errors]);\n\n  function getErrors(state, config) {\n    if (config.showErrors === 'always') {\n      return state.errors;\n    }\n\n    if (config.showErrors === 'blur') {\n      return Object.entries(state.blurred).filter(([, blurred]) => blurred).reduce((acc, [name]) => _objectSpread({}, acc, {\n        [name]: state.errors[name]\n      }), {});\n    }\n\n    return state.isSubmitted ? state.errors : {};\n  }\n\n  function getInitialState(config) {\n    if (typeof config === 'function') {\n      config = config({});\n    }\n\n    const initial = Object.keys(config.fields).reduce(([initialValues, initialBlurred], fieldName) => {\n      initialValues[fieldName] = config.fields[fieldName].initialValue || '';\n      initialBlurred[fieldName] = false;\n      return [initialValues, initialBlurred];\n    }, [{}, {}]);\n    const initialErrors = validate(initial[0], config.fields);\n    return {\n      values: initial[0],\n      errors: initialErrors,\n      blurred: initial[1],\n      isSubmitted: false\n    };\n  }\n\n  function onSubmit(event) {\n    if (event) event.preventDefault();\n    dispatch({\n      type: SUBMIT\n    });\n    console.log('!!', state, isFormValid);\n    if (submitCallback) submitCallback(_objectSpread({}, state, {\n      isFormValid\n    }));\n  }\n\n  function getFieldProps(fieldName) {\n    return {\n      onChange: e => {\n        const value = e.target.value;\n        if (!config.fields[fieldName]) return;\n        dispatch({\n          type: UPDATE,\n          payload: {\n            [fieldName]: value\n          }\n        });\n      },\n      onBlur: () => {\n        dispatch({\n          type: BLUR,\n          payload: fieldName\n        });\n      },\n      name: fieldName,\n      value: state.values[fieldName] || '',\n      error: errors[fieldName],\n      'aria-invalid': String(!!errors[fieldName])\n    };\n  }\n\n  return {\n    isSubmitted: state.isSubmitted,\n    isFormValid,\n    handleSubmit,\n    getFieldProps,\n    errors\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["/home/skyparci/work/my-boilerplate/packages/client/src/hooks/useValidation/useValidation.js"],"names":["useReducer","useMemo","useCallback","useDeepCompareEffect","validate","UPDATE","VALIDATE","BLUR","SUBMIT","reducer","state","type","payload","values","console","log","fieldName","value","errors","blurred","isSubmitted","useForm","config","submitCallback","getInitialState","dispatch","handleSubmit","onSubmit","fields","getErrors","isFormValid","Object","every","error","showErrors","entries","filter","reduce","acc","name","initial","keys","initialValues","initialBlurred","initialValue","initialErrors","event","preventDefault","getFieldProps","onChange","e","target","onBlur","String"],"mappings":"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","sourcesContent":["import { useReducer, useMemo, useCallback } from 'react';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport validate from './validate';\n// constants\nconst UPDATE = 'UPDATE';\nconst VALIDATE = 'VALIDATE';\nconst BLUR = 'BLUR';\nconst SUBMIT = 'SUBMIT';\n\nfunction reducer(state, { type, payload }) {\n    switch (type) {\n        case UPDATE:\n            const values = { ...state.values, ...payload };\n            console.log('change', fieldName, value);\n            return {\n                ...state,\n                values,\n                errors: {},\n            };\n        case VALIDATE:\n            return { ...state, errors: payload };\n        case BLUR:\n            const blurred = { ...state.blurred, [payload]: true };\n            return { ...state, blurred };\n        case SUBMIT:\n            return { ...state, isSubmitted: true };\n        default:\n            return state;\n    }\n}\n\nconst useForm = (config = {}, submitCallback) => {\n    const [state, dispatch] = useReducer(reducer, getInitialState(config));\n\n    if (typeof config === 'function') config = config(state.values);\n\n    const handleSubmit = useCallback(onSubmit, []);\n\n    useDeepCompareEffect(() => {\n        const errors = validate(state.values, config.fields);\n\n        dispatch({ type: VALIDATE, payload: errors });\n    }, [state.values, config.fields]);\n\n    const errors = useMemo(() => getErrors(state, config), [state, config]);\n\n    const isFormValid = useMemo(\n        () => Object.values(errors).every(error => error === null),\n        [errors],\n    );\n\n    function getErrors(state, config) {\n        if (config.showErrors === 'always') {\n            return state.errors;\n        }\n\n        if (config.showErrors === 'blur') {\n            return Object.entries(state.blurred)\n                .filter(([, blurred]) => blurred)\n                .reduce(\n                    (acc, [name]) => ({ ...acc, [name]: state.errors[name] }),\n                    {},\n                );\n        }\n        return state.isSubmitted ? state.errors : {};\n    }\n\n    function getInitialState(config) {\n        if (typeof config === 'function') {\n            config = config({});\n        }\n\n        const initial = Object.keys(config.fields).reduce(\n            ([initialValues, initialBlurred], fieldName) => {\n                initialValues[fieldName] =\n                    config.fields[fieldName].initialValue || '';\n                initialBlurred[fieldName] = false;\n                return [initialValues, initialBlurred];\n            },\n            [{}, {}],\n        );\n\n        const initialErrors = validate(initial[0], config.fields);\n        return {\n            values: initial[0],\n            errors: initialErrors,\n            blurred: initial[1],\n            isSubmitted: false,\n        };\n    }\n\n    function onSubmit(event) {\n        if (event) event.preventDefault();\n\n        dispatch({ type: SUBMIT });\n        console.log('!!', state, isFormValid);\n        if (submitCallback) submitCallback({ ...state, isFormValid });\n    }\n\n    function getFieldProps(fieldName) {\n        return {\n            onChange: e => {\n                const { value } = e.target;\n\n                if (!config.fields[fieldName]) return;\n                \n                dispatch({\n                    type: UPDATE,\n                    payload: { [fieldName]: value },\n                });\n            },\n            onBlur: () => {\n                dispatch({ type: BLUR, payload: fieldName });\n            },\n            name: fieldName,\n            value: state.values[fieldName] || '',\n            error: errors[fieldName],\n            'aria-invalid': String(!!errors[fieldName]),\n        };\n    }\n\n    return {\n        isSubmitted: state.isSubmitted,\n        isFormValid,\n        handleSubmit,\n        getFieldProps,\n        errors,\n    };\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}