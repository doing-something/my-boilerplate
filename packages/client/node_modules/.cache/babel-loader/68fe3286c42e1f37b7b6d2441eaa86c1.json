{"ast":null,"code":"import _slicedToArray from \"/home/skyparci/work/my-boilerplate/packages/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/skyparci/work/my-boilerplate/packages/client/src/scenes/Signin/index.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router'; // apollo\n\nimport { useMutation } from '@apollo/react-hooks'; // components\n\nimport TextField from 'components/TextField';\nimport Button from 'components/Button';\nimport Modal from 'components/Modal'; // queries\n\nimport { LOGIN_USER, GET_USER } from 'queries'; // hooks\n\nimport useValidation, { isRequired, isEmail, lengthBetween } from 'hooks/useValidation'; // global\n\nimport { useGlobalStateContext } from 'global'; // styles\n\nimport { ButtonWrap } from './styles';\nconst configs = {\n  email: {\n    rules: [[isRequired, 'email을 입력하세요.'], [isEmail, '올바른 email 주소가 아닙니다.']]\n  },\n  password: {\n    rules: [[isRequired, '비밀번호를 입력하세요.'], [lengthBetween(8, 35), '8-35 자를 입력하세요.']]\n  }\n};\n\nconst Signin = props => {\n  const _useGlobalStateContex = useGlobalStateContext(),\n        LOG = _useGlobalStateContex.LOG;\n\n  const _useMutation = useMutation(LOGIN_USER, {\n    update: (cache, {\n      data: {\n        loginUser\n      }\n    }) => {\n      try {\n        cache.writeQuery({\n          query: GET_USER,\n          data: {\n            user: loginUser\n          }\n        });\n      } catch (err) {\n        LOG('cache error: ', err);\n      }\n    }\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        loginUser = _useMutation2[0],\n        _useMutation2$ = _useMutation2[1],\n        loading = _useMutation2$.loading,\n        error = _useMutation2$.error;\n\n  LOG('history', props);\n\n  const submitForm = async () => {\n    await loginUser({\n      variables: {\n        email: formState['email'].value,\n        password: formState['password'].value\n      }\n    }).then(resp => {\n      LOG('resp', resp);\n      localStorage.setItem('authToken', resp.data.user.token); // history.push('/contracts');\n\n      LOG('111');\n    }).catch(error => {\n      LOG('Error: ', error.message);\n    });\n  };\n\n  const _useValidation = useValidation(configs, submitForm),\n        formState = _useValidation.formState,\n        isSubmitting = _useValidation.isSubmitting,\n        handleChange = _useValidation.handleChange,\n        handleSubmit = _useValidation.handleSubmit;\n\n  LOG('formState', isSubmitting);\n  return React.createElement(\"div\", {\n    className: \"wrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(TextField, Object.assign({\n    title: \"User Email\",\n    placeholder: \"Email address\",\n    onChange: handleChange\n  }, formState['email'], {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(TextField, Object.assign({\n    type: \"password\",\n    title: \"Password\",\n    placeholder: \"Password\",\n    onChange: handleChange\n  }, formState['password'], {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(ButtonWrap, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    content: \"\\uB85C\\uADF8\\uC778\",\n    primary: true,\n    block: true,\n    loading: loading,\n    disabled: isSubmitting && !error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/signup\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Button, {\n    content: '회원가입',\n    primary: true,\n    block: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }))))), error && React.createElement(Modal, {\n    isVisible: !!error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, error && error.message)));\n};\n\nexport default withRouter(Signin);","map":{"version":3,"sources":["/home/skyparci/work/my-boilerplate/packages/client/src/scenes/Signin/index.js"],"names":["React","Link","withRouter","useMutation","TextField","Button","Modal","LOGIN_USER","GET_USER","useValidation","isRequired","isEmail","lengthBetween","useGlobalStateContext","ButtonWrap","configs","email","rules","password","Signin","props","LOG","update","cache","data","loginUser","writeQuery","query","user","err","loading","error","submitForm","variables","formState","value","then","resp","localStorage","setItem","token","catch","message","isSubmitting","handleChange","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router';\n// apollo\nimport { useMutation } from '@apollo/react-hooks';\n// components\nimport TextField from 'components/TextField';\nimport Button from 'components/Button';\nimport Modal from 'components/Modal';\n// queries\nimport { LOGIN_USER, GET_USER } from 'queries';\n// hooks\nimport useValidation, {\n    isRequired,\n    isEmail,\n    lengthBetween,\n} from 'hooks/useValidation';\n// global\nimport { useGlobalStateContext } from 'global';\n// styles\nimport { ButtonWrap } from './styles';\n\nconst configs = {\n    email: {\n        rules: [\n            [isRequired, 'email을 입력하세요.'],\n            [isEmail, '올바른 email 주소가 아닙니다.'],\n        ],\n    },\n    password: {\n        rules: [\n            [isRequired, '비밀번호를 입력하세요.'],\n            [lengthBetween(8, 35), '8-35 자를 입력하세요.'],\n        ],\n    },\n};\n\nconst Signin = props => {\n    const { LOG } = useGlobalStateContext();\n    const [loginUser, { loading, error }] = useMutation(LOGIN_USER, {\n        update: (cache, { data: { loginUser } }) => {\n            try {\n                cache.writeQuery({\n                    query: GET_USER,\n                    data: { user: loginUser },\n                });\n            } catch (err) {\n                LOG('cache error: ', err);\n            }\n        },\n    });\n    LOG('history', props);\n    const submitForm = async () => {\n        await loginUser({\n            variables: {\n                email: formState['email'].value,\n                password: formState['password'].value,\n            },\n        })\n            .then(resp => {\n                LOG('resp', resp);\n                localStorage.setItem('authToken', resp.data.user.token);\n                // history.push('/contracts');\n                LOG('111');\n            })\n            .catch(error => {\n                LOG('Error: ', error.message);\n            });\n    };\n\n    const {\n        formState,\n        isSubmitting,\n        handleChange,\n        handleSubmit,\n    } = useValidation(configs, submitForm);\n    LOG('formState', isSubmitting);\n    return (\n        <div className=\"wrap\">\n            <form onSubmit={handleSubmit} noValidate>\n                <TextField\n                    title=\"User Email\"\n                    placeholder=\"Email address\"\n                    onChange={handleChange}\n                    {...formState['email']}\n                />\n                <br />\n                <TextField\n                    type=\"password\"\n                    title=\"Password\"\n                    placeholder=\"Password\"\n                    onChange={handleChange}\n                    {...formState['password']}\n                />\n                <br />\n                <ButtonWrap>\n                    <Button\n                        type=\"submit\"\n                        content={`로그인`}\n                        primary\n                        block\n                        loading={loading}\n                        disabled={isSubmitting && !error}\n                    />\n                    <div>\n                        <Link to=\"/signup\">\n                            <Button content={'회원가입'} primary block />\n                        </Link>\n                    </div>\n                </ButtonWrap>\n            </form>\n\n            {error && (\n                <Modal isVisible={!!error}>\n                    <div className=\"text-center\">{error && error.message}</div>\n                </Modal>\n            )}\n        </div>\n    );\n};\n\nexport default withRouter(Signin);\n"]},"metadata":{},"sourceType":"module"}